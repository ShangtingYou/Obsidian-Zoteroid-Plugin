/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LiteraturePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  literatureRoot: "Literature",
  literatureOverviewPagePath: "Literature Overview.md"
};
function sanitizeForPath(name) {
  return name.replace(/[<>:"\/\\|?*\x00-\x1F]/g, "_").trim();
}
function extractYearFromCrossref(message) {
  var _a, _b, _c, _d, _e, _f;
  try {
    const parts = (_b = (_a = message.issued) == null ? void 0 : _a["date-parts"]) == null ? void 0 : _b[0];
    if (parts && parts.length > 0)
      return String(parts[0]);
  } catch (e) {
  }
  try {
    const parts = ((_d = (_c = message["published-print"]) == null ? void 0 : _c["date-parts"]) == null ? void 0 : _d[0]) || ((_f = (_e = message["published-online"]) == null ? void 0 : _e["date-parts"]) == null ? void 0 : _f[0]);
    if (parts && parts.length > 0)
      return String(parts[0]);
  } catch (e) {
  }
  return "UnknownYear";
}
function stripHtmlTags(html) {
  if (!html)
    return "";
  return html.replace(/<[^>]*>/g, "").trim();
}
var DoiModal = class extends import_obsidian.Modal {
  constructor(app, onSearch) {
    super(app);
    this.onSearch = onSearch;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Import literature by DOI" });
    const input = contentEl.createEl("input", { type: "text" });
    input.placeholder = "Paste DOI here (e.g. 10.1038/s41586-020-2649-2)";
    input.style.width = "100%";
    input.style.marginBottom = "8px";
    const btn = contentEl.createEl("button", { text: "Search" });
    btn.onclick = async () => {
      const raw = input.value.trim();
      const doiMatch = raw.match(/(10\.\d{4,9}\/[-._;()\/:A-Z0-9]+)/i);
      if (!doiMatch) {
        new import_obsidian.Notice("Invalid DOI or DOI URL");
        return;
      }
      const doi = doiMatch[1];
      await this.onSearch(doi);
      this.close();
    };
    input.addEventListener("keydown", async (e) => {
      if (e.key === "Enter") {
        btn.click();
      }
    });
    setTimeout(() => input.focus(), 50);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var OverviewModal = class extends import_obsidian.Modal {
  constructor(app, onGenerate) {
    super(app);
    this.onGenerate = onGenerate;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "Generate (overwrite) literature overview?" });
    const btn = contentEl.createEl("button", { text: "Generate" });
    btn.onclick = async () => {
      await this.onGenerate();
      this.close();
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var LiteraturePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("microscope", "Import literature by DOI", () => {
      new DoiModal(this.app, async (doi) => {
        await this.handleDOI(doi);
      }).open();
    });
    this.addRibbonIcon("brain", "Generate literature overview page", () => {
      new OverviewModal(this.app, async () => {
        await this.generateOverviewPage();
      }).open();
    });
    this.addSettingTab(new LiteratureSettingTab(this.app, this));
  }
  onunload() {
  }
  async generateOverviewPage() {
    const overviewContent = [
      `---
`,
      `type: ZoteroidOverview`,
      `---


`,
      `### Filtered Paper`,
      `\`\`\`dataview`,
      `TABLE Journal, Title, Year, Keyword`,
      `FROM "${this.settings.literatureRoot}"`,
      `WHERE type = "ZoteroidRecord"`,
      ``,
      `// change here to filter by keyword, journal, year, etc.`,
      `WHERE (contains(Keyword, "#keyword1") or contains(Keyword, "")) and contains(journal, "") and (year > 1949)`,
      ``,
      `// change here to sort by date added or publish year, in ASC or DESC order`,
      `// SORT Year DESC`,
      `SORT date DESC`,
      `\`\`\``,
      ``,
      `### All Keywords`,
      `\`\`\`dataview`,
      `LIST WITHOUT ID Keyword`,
      `FROM "${this.settings.literatureRoot}"`,
      `WHERE Keyword`,
      `FLATTEN Keyword`,
      "GROUP BY Keyword",
      `SORT Keyword ASC`,
      `\`\`\``,
      ``,
      `### All Journals`,
      `\`\`\`dataview`,
      `LIST WITHOUT ID Journal`,
      `FROM "${this.settings.literatureRoot}"`,
      `WHERE Journal`,
      `FLATTEN Journal`,
      "GROUP BY Journal",
      `SORT Journal ASC`,
      `\`\`\``,
      ``,
      `### All Labs`,
      `\`\`\`dataview`,
      `LIST WITHOUT ID Lab`,
      `FROM "${this.settings.literatureRoot}"`,
      `WHERE Lab`,
      `FLATTEN Lab`,
      "GROUP BY Lab",
      `SORT Lab ASC`,
      `\`\`\``,
      `


To correctly display this page, you need to install Dataview plug-in.`
    ];
    if (this.settings.literatureOverviewPagePath) {
      const overviewPath = (0, import_obsidian.normalizePath)(this.settings.literatureOverviewPagePath);
      const file = this.app.vault.getAbstractFileByPath(overviewPath);
      if (file instanceof import_obsidian.TFile) {
        await this.app.vault.modify(
          file,
          overviewContent.join("\n")
        ).catch(() => {
        });
        new import_obsidian.Notice("Overwritten literature overview page");
      } else {
        await this.app.vault.create(
          overviewPath,
          overviewContent.join("\n")
        ).catch(() => {
        });
        new import_obsidian.Notice("Created literature overview page");
      }
      if (file instanceof import_obsidian.TFile)
        this.app.workspace.getLeaf(false).openFile(file);
    }
  }
  async handleDOI(rawDoi) {
    const doi = rawDoi.trim();
    const url = `https://api.crossref.org/works/${encodeURIComponent(doi)}`;
    let resp;
    try {
      resp = await fetch(url, { method: "GET" });
    } catch (e) {
      console.error("Network error when checking DOI", e);
      new import_obsidian.Notice("Network error when checking DOI");
      return;
    }
    if (!resp.ok) {
      new import_obsidian.Notice("DOI does not exist");
      return;
    }
    let data;
    try {
      data = await resp.json();
    } catch (e) {
      console.error("Error parsing Crossref JSON", e);
      new import_obsidian.Notice("Error reading DOI metadata");
      return;
    }
    const message = data.message;
    if (!message) {
      new import_obsidian.Notice("DOI does not exist");
      return;
    }
    const pubType = message.type || "";
    const year = extractYearFromCrossref(message);
    const title = Array.isArray(message.title) && message.title[0] ? message.title[0] : message.title || "Untitled";
    let journal = "";
    if (Array.isArray(message["container-title"]) && message["container-title"][0]) {
      journal = message["container-title"][0];
    }
    let filenameBase = "";
    if (pubType.includes("journal")) {
      filenameBase = `${journal} - ${year} - ${title}`;
    } else if (pubType.includes("book")) {
      filenameBase = `BOOK - ${year} - ${title}`;
    } else {
      filenameBase = `${journal || "UNKNOWN"} - ${year} - ${title}`;
    }
    const filenameBaseTrim = filenameBase.substring(0, 100).trim();
    const doiFolderName = sanitizeForPath(filenameBaseTrim);
    const root = this.settings.literatureRoot || DEFAULT_SETTINGS.literatureRoot;
    const folderPath = root.endsWith("/") ? `${root}${doiFolderName}` : `${root}/${doiFolderName}`;
    const existingFolder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!existingFolder) {
      try {
        await this.app.vault.createFolder(folderPath);
      } catch (e) {
        console.error("Error creating folder", e);
        new import_obsidian.Notice("Failed to create folder. Check that literature root exists and is writable.");
        return;
      }
    }
    const fileNameSafe = sanitizeForPath(filenameBaseTrim) + ".md";
    const filePath = `${folderPath}/${fileNameSafe}`;
    const existingFile = this.app.vault.getAbstractFileByPath(filePath);
    if (existingFile) {
      new import_obsidian.Notice("Record already exists, if you want to re-create it, please delete the old one and try again.");
      if (existingFile instanceof import_obsidian.TFile) {
        this.app.workspace.getLeaf(false).openFile(existingFile);
      }
      return;
    }
    const dateAdded = new Date().toISOString().split("T")[0];
    const abstractRaw = message.abstract ? stripHtmlTags(message.abstract) : "";
    const doiUrl = `https://doi.org/${doi}`;
    const rawAuthors = data.message.author || [];
    const authorNames = rawAuthors.map((author) => {
      var _a, _b;
      if (!author)
        return "";
      if (author.literal)
        return author.literal;
      const given = (_a = author.given) != null ? _a : "";
      const family = (_b = author.family) != null ? _b : "";
      return `${given}${given && family ? " " : ""}${family}`.trim();
    }).filter(Boolean).join("; ");
    const contentLines = [
      /*
      `### Title\n\n${title}\n`,
      `### DOI\n\n${doiUrl}\n`,
      `### Journal\n\n${journal || ''}\n`,
      `### Year\n\n${year}\n`,
      `### Abstract\n\n${abstractRaw}\n`,
      `### Keywords\n\n\n`,
      `### Research group\n\n\n`,
      `### Main idea\n\n\n`,
      `### Materials and methods\n\n\n`,
      `### Comment\n\n\n`
      */
      `---
`,
      `type: ZoteroidRecord`,
      `date: ${dateAdded}`,
      `---


`,
      `### Title
(Title:: ${title})
`,
      `### Journal
(Journal:: ${journal || ""})
`,
      `### Year
(Year:: ${year})
`,
      `### DOI
(DOI:: ${doiUrl})
`,
      `### Lab
(Lab:: #nobody)
`,
      `### Keyword
(Keyword:: #keyword1)
(Keyword:: #keyword2)
`,
      `### Authors
${authorNames}`,
      `### Abstract
${abstractRaw}
`,
      `### Main idea


`,
      `### Materials and methods


`,
      `### Comment


`
    ];
    const fileContent = contentLines.join("\n");
    try {
      const created = await this.app.vault.create(filePath, fileContent);
      new import_obsidian.Notice("Record successfully created");
      this.app.workspace.getLeaf(false).openFile(created);
    } catch (e) {
      console.error("Error creating file", e);
      new import_obsidian.Notice("Failed to create file.");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var LiteratureSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Literature Manager Settings" });
    new import_obsidian.Setting(containerEl).setName("Literature root directory").setDesc("Path inside your vault where literature folders will be created (e.g. Literature or assets/literature). Folder will be created if not present.").addText((text) => text.setPlaceholder("Literature").setValue(this.plugin.settings.literatureRoot).onChange(async (value) => {
      this.plugin.settings.literatureRoot = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Literature overview page").setDesc("Full path and file name for the overview page").addText((text) => text.setPlaceholder("Example: Literature/Overview.md").setValue(this.plugin.settings.literatureOverviewPagePath).onChange(async (value) => {
      this.plugin.settings.literatureOverviewPagePath = value.trim();
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
